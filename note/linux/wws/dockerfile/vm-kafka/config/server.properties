# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
# Broker的ID,集群内唯一,默认:-1
broker.id=0

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from 
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
listeners=SASL_PLAINTEXT://192.168.100.169:9092
security.inter.broker.protocol=SASL_PLAINTEXT
sasl.enabled.mechanisms=PLAIN
sasl.mechanism.inter.broker.protocol=PLAIN

# Hostname and port the broker will advertise to producers and consumers. If not set, 
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092
advertised.listeners=SASL_PLAINTEXT://81.68.123.235:9092

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
# 服务端用于接收来自网络请求并向网络发送响应的线程数,默认:3
num.network.threads=3

# The number of threads that the server uses for processing requests, which may include disk I/O
# 服务端用于处理请求的线程数,其中可能包括磁盘I/O,默认:8
num.io.threads=8

# The send buffer (SO_SNDBUF) used by the socket server
# 套接字服务端使用的发送缓冲区(SO_SNDBUF),默认:102400(100KB)
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
# 套接字服务端使用的接收缓冲区(SO_RCVBUF),默认:102400(100KB)
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
# 套接字服务端将接受一次请求数据量的最大大小(针对OOM的保护),默认:104857600(100MB)
socket.request.max.bytes=104857600
#message.max.bytes=1000012

############################# Log Basics #############################

# A comma separated list of directories under which to store log files
# 日志文件目录：以逗号分隔的目录列表,用于存储日志文件,默认:/tmp/kafka-logs
log.dirs=/apply/data/kafka/logs

# The default number of log partitions per topic.
# More partitions allow greater parallelism for consumption, but this will also result in more files across the brokers.
# 每个主题默认的日志分区数.更多的分区允许更大的并行消费,但这也会导致Broker服务端中的文件更多,默认:1
num.partitions=1
# 默认的副本因子(分区的副本数),默认:1
#default.replication.factor=1

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
# 每个数据目录在启动时用于日志恢复以及在关闭时用于刷新的线程数,对于在RAID阵列中具有数据目录的安装,建议增加此值,默认:1
num.recovery.threads.per.data.dir=1

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
offsets.topic.replication.factor=1
transaction.state.log.replication.factor=1
transaction.state.log.min.isr=1

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
# 强制将数据刷盘之前要接受的消息数,默认:10000
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
# 强制刷新之前,消息可以在日志中停留的最长时间,默认:1000(1秒)
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
# 日志保留时长(小时),过期会被清理,默认:168(7天)
log.retention.hours=168

# A size-based retention policy for logs.
# Segments are pruned from the log unless the remaining segments drop below log.retention.bytes. Functions independently of log.retention.hours.
# 基于大小的日志保留策略.除非其余段降到log.retention.bytes以下,否则将从日志中删除段.功能独立于log.retention.hours.默认:1073741824(1G)
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
# 日志段文件的最大大小.达到此大小后,将创建一个新的日志段.默认:1073741824(1G)
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according to the retention policies
# 检查日志段以了解是否可以根据保留策略将其删除的时间间隔.默认:300000(5分)
log.retention.check.interval.ms=300000

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the root directory for all kafka znodes.
# 你也可以在路径中附加可选的chroot字符串,以指定所有kafka的ZNode根目录
zookeeper.connect=127.0.0.1:2181/kafka

# Timeout in ms for connecting to zookeeper
# 连接到Zookeeper的超时时间.默认:6000(6秒)
zookeeper.connection.timeout.ms=6000


############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
group.initial.rebalance.delay.ms=0
